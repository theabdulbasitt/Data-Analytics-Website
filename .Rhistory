library(shiny)
library(readxl)
library(dplyr)
library(ggplot2)
library(shinythemes)
ui <- navbarPage(
theme = shinytheme("slate"),
"Data Analytics App",
# Project Tab
tabPanel("Project",
sidebarLayout(
sidebarPanel(
fileInput("file", "Upload Excel file", accept = c(".xls", ".xlsx")),
selectInput("column", "Select a column for analysis:", ""),  # for variable input
selectInput("x_column", "Select X-axis column for scatter plot:", ""),
selectInput("y_column", "Select Y-axis column for scatter plot:", ""),
# Slider input for histogram bins
sliderInput("bins", "Number of Bins for Histogram:", min = 3, max = 20, value = 7),
# Slider input for frequency table classes
sliderInput("classes", "Number of Classes for Frequency Table:", min = 5, max = 15, value = 7)
),
mainPanel(
tableOutput("freq_table"),
plotOutput("histogram"),
plotOutput("box_plot"),
plotOutput("scatter_plot"),
verbatimTextOutput("summary_stats")
)
)
),
tabPanel("Normal Distribution",
sidebarLayout(
sidebarPanel(
selectInput("column_normal", "Select a column for Normal Distribution:", ""),  # for variable input
actionButton("calculate_normal", "Calculate Normal Distribution")
),
mainPanel(
verbatimTextOutput("normal_result")
)
)
),
tabPanel("Binomial Distribution",
sidebarLayout(
sidebarPanel(
numericInput("n", "Enter n (number of trials):", value = 10),
numericInput("p", "Enter p (probability of success):", value = 0.5),
numericInput("x", "Enter x (number of successes):", value = 5),
actionButton("calculate", "Calculate Binomial Distribution")
),
mainPanel(
verbatimTextOutput("binomial_result")
)
)
),
tabPanel("Poisson Distribution",
sidebarLayout(
sidebarPanel(
numericInput("lambda", "Enter lambda (average number of successes):", value = 5),
numericInput("x_poisson", "Enter x (number of successes):", value = 5),
actionButton("calculate_poisson", "Calculate Poisson Distribution")
),
mainPanel(
verbatimTextOutput("poisson_result")
)
)
),
tabPanel("Hypergeometric Distribution",
sidebarLayout(
sidebarPanel(
numericInput("N", "Enter N (total population):", value = 100),
numericInput("n", "Enter n (number of successes in the population):", value = 20),
numericInput("x_hyper", "Enter x (number of successes in the sample):", value = 5),
numericInput("s", "Enter s (sample size):", value = 10),
actionButton("calculate_hyper", "Calculate Hypergeometric Distribution")
),
mainPanel(
verbatimTextOutput("hyper_result")
)
)
),
# Team Tab
tabPanel("Team",
fluidRow(
column(width = 3,
img(src = "basit.jpg", width = "100%"),
h3("Abdul Basit")
),
column(width = 3,
img(src = "husnain.jpg", width = "100%"),
h3("Husnain")
),
column(width = 3,
img(src = "abdul.jpg", width = "100%"),
h3("Abdul Wahab")
),
column(width = 3,
img(src = "m.jpg", width = "100%"),
h3("Majid")
)
)
)
)
server <- function(input, output, session) {
# Read the uploaded Excel file
data <- reactiveVal(NULL)
observeEvent(input$file, {
req(input$file)
infile <- input$file$datapath
data(read_excel(infile, col_types = "guess"))  # Infer column types automatically
})
# Update the column dropdown based on the uploaded data
observe({
df <- data()
if (!is.null(df)) {
columns <- names(df)
updateSelectInput(session, "column", choices = columns)
updateSelectInput(session, "x_column", choices = columns)
updateSelectInput(session, "y_column", choices = columns)
updateSelectInput(session, "dist_column", choices = columns)
}
})
# Perform data analytics based on the selected column
observeEvent(input$column, {
req(input$column)
df <- data()
col_name <- input$column
if (col_name %in% names(df)) {        # for data analysis
if (is.numeric(df[[col_name]])) {
# Generate frequency distribution table
output$freq_table <- renderTable({
classes <- input$classes
freq_table <- table(cut(df[[col_name]], breaks = classes, include.lowest = TRUE, labels = FALSE))
freq_table_df <- data.frame(Class = gsub("\\s*-\\s*", "-", names(freq_table)), Frequency = as.vector(freq_table))
freq_table_df
})
# Generate histogram
output$histogram <- renderPlot({
bins <- input$bins
ggplot(df, aes_string(x = col_name, fill = col_name)) +
geom_histogram(color = "black", bins = bins) +  # Use the selected number of bins
theme_minimal() +
scale_fill_manual(values = "black") # Set histogram bars to blue color
})
# Generate box plot
output$box_plot <- renderPlot({
ggplot(df, aes_string(y = col_name)) + geom_boxplot() +
theme_minimal()
})
# Generate scatter plot
output$scatter_plot <- renderPlot({
x_col <- input$x_column
y_col <- input$y_column
ggplot(df, aes_string(x = x_col, y = y_col)) + geom_point() +
theme_minimal()
})
# Display summary statistics
output$summary_stats <- renderPrint({
summary_stats <- summary(df[[col_name]])
variance <- var(df[[col_name]])
standard_deviation <- sd(df[[col_name]])
summary_stats <- c(summary_stats, Variance = variance, `Standard Deviation` = standard_deviation)
summary_stats
})
} else {
output$histogram <- NULL
output$box_plot <- NULL
output$scatter_plot <- NULL
output$summary_stats <- renderText("Please select a suitable quantitative column for analysis.")
}
}
})
# Calculate Poisson distribution
observeEvent(input$calculate_poisson, {
lambda <- input$lambda
x_poisson <- input$x_poisson
if (is.numeric(lambda) && is.numeric(x_poisson) && lambda >= 0 && x_poisson >= 0) {
poisson_prob <- dpois(x_poisson, lambda = lambda)
output$poisson_result <- renderPrint({
paste0("Poisson Distribution Result: ", poisson_prob)
})
} else {
output$poisson_result <- renderText("Please enter valid values for lambda and x.")
}
})
observeEvent(input$calculate, {
n <- input$n
p <- input$p
x <- input$x
if (is.numeric(n) && is.numeric(p) && is.numeric(x) && n > 0 && p >= 0 && p <= 1 && x >= 0 && x <= n) {
binomial_prob <- dbinom(x, size = n, prob = p)
output$binomial_result <- renderPrint({
paste0("Binomial Distribution Result: ", binomial_prob)
})
} else {
output$binomial_result <- renderText("Please enter valid values for n, p, and x.")
}
})
observe({
df <- data()
if (!is.null(df)) {
columns <- names(df)
num_cols <- sapply(df, is.numeric)
updateSelectInput(session, "column_normal", choices = columns[num_cols])
}
})
# Calculate normal distribution
observeEvent(input$calculate_normal, {
col_name <- input$column_normal
df <- data()
if (!is.null(df[[col_name]]) && is.numeric(df[[col_name]])) {
col_values <- df[[col_name]]
mean_value <- mean(col_values)
sd_value <- sd(col_values)
normal_density <- dnorm(col_values, mean = mean_value, sd = sd_value)
output$normal_result <- renderPrint({
paste0("Normal Distribution Result for column '", col_name, "': ", normal_density)
})
} else {
output$normal_result <- renderText("Please select a valid column with quantitative data for the normal distribution.")
}
})
# Calculate hypergeometric distribution
observeEvent(input$calculate_hyper, {
N <- input$N
n <- input$n
x_hyper <- input$x_hyper
s <- input$s
if (is.numeric(N) && is.numeric(n) && is.numeric(x_hyper) && is.numeric(s) &&
N > 0 && n >= 0 && n <= N && x_hyper >= 0 && x_hyper <= n && s > 0 && s <= N) {
hyper_prob <- dhyper(x_hyper, m = n, N - n, s)
output$hyper_result <- renderPrint({
paste0("Hypergeometric Distribution Result: ", hyper_prob)
})
} else {
output$hyper_result <- renderText("Please enter valid values for N, n, x, and s.")
}
})
}
shinyApp(ui, server)
